---------------------------------REBASE TRONG GIT-----------------------
<Kiểm soát được lịch sử, thứ tự các lần commit, chức năng như MERGE>
1. Bản chất của REBASE : 
Ví dụ cần gộp lần commit cuối của nhánh_1 (nguồn) vào nhánh_2 (đích)
 + MERGE sẽ gộp nội dung từ nhánh_1 vào nhánh_2 tạo thành nhánh_2
commit mới có parent là commit trc đó ở 2 nhánh là nhánh_1 và nhánh_2  
(commit mới tạo sẽ được trỏ bởi cả nhánh_1 và nhánh_2)
 + REBASE thì : bốc luôn cả lần commit cuối ở nhánh_1 xuống gộp vào
thành commit cuối ở nhánh_2 (commit mới tạo sẽ trỏ bởi nhánh_1) 
 + Quá trình REBASE được thực hiện bằng cách thực hiện lại các thay đổi từ 
nhánh này qua nhánh khác theo thứ tự chúng đã được thực hiện, trong khi đó 
MERGE lại lấy hai điểm kết thúc và gộp chúng lại với nhau.

2. Cú pháp
 + Trở về nhánh chứa dữ liệu cần gộp đã commit (nhánh_1 - nhánh nguồn)
	git checkout $nhánh_1
 + Chạy lại (replay) nhánh nguồn đó lên nhánh cần gộp (nhánh_2 - nhánh đích)
	git rebase $nhánh_2
 + Sau đó lại về nhánh đích (nhánh cần gộp)
	git checkout $nhánh_2
 + Thực hiện fast-forward merge tại nhánh này

VD cho quá trình này :
	C3 (last commit) ở nhánh_1 cần được gộp vào nhánh_2 
(nhánh_2 đang có last commit là C4)
	+ Nếu dùng merge thì sẽ tạo ra C5 tại nhánh_2 với $nhánh_1
và $nhánh_2 cùng trỏ tới C5
	+ Nếu dùng rebase : tạo ra C3' ở sau C4 của nhánh_2, C3' tức
là phần rebase được chạy ở nhánh_2 -> fast-forward merge để $nhánh_1
và $nhánh_2 cùng trỏ tới C3' này
--> Không có sự khác biệt về kết quả khi dùng MERGE và REBASE, tuy
nhiên dùng REBASE sẽ giúp ta có lịch sử rõ ràng hơn

3. REBASE nâng cao
 + Tham khảo từ https://git-scm.com/book/vi/v1/
Ph%C3%A2n-Nh%C3%A1nh-Trong-Git-Rebasing
 + Kịch bản : có 3 nhánh master, server, client
 + Cú pháp : git rebase --onto master server client

4. Lời khuyên khi dùng REBASE:
 + Chỉ nên thao tác trên local chứ không share cho người khác
 + Hoàn thiện rồi mới push lên share
 + Vì hủy bỏ đi commit cũ
 + Vì thay đổi thứ tự commit cũ trên repo

---------------LÀM RÕ HƠN VỀ RESET------------------------
Có 3 TREE trong Git
Theo vòng đời của 1 commit thì dựa vào 3 cây trên:

	Working Directory ----------> Index -----------------> HEAD
		|		|		|
		|<-----------------Checkout Project-------------|
		|		|		|
		|----Stage Files------->|		|
		|		|		|
		|		|----Commit---------->|
		
* Chú ý: mục 1,2,3,4 áp dụng cho Commit Level; 5,6 cho File Level

1. Con trỏ HEAD trỏ đến commit cuối cùng trong nhánh hiện tại
và sẽ là parent của commit tiếp theo

2. Index (commit id) tương đương Staging Area (những thứ git nhìn khi 
ta run commit)
	git ls-files -s

3. Working Directory: 2 cây trên lưu ở trong .git folder
Còn cây này thì lưu vật lý, nơi chưa cập nhật vào git

4. Workflow Processed: 
Bản chất của git với ý hiểu cá nhân :
+ 1 dự án có nhiều branch
+ trong mỗi branch lại có nhiều commit
+ mỗi commit là 1 snapshot chụp lại trạng thái các file trong nhánh đó
+ head sẽ trỏ đến commit cuối của branch đang làm việc
+ tag là 1 thứ đồng hành song song, khi có 1 branch nào đó với 1 commit
nào đó được gắn tag thì đó là lúc release

-> khi gõ lệnh (git reset $sha_key_commit_40_char) 
	hoặc git reset --soft HEAD~
sẽ chuyển con trỏ head về trỏ vào commit đó, điều này chỉ thay đổi 
ở HEAD, chứ còn Index và Working Directory vẫn chứa phần commit 
mới nhất. -> dùng (git checkout $ten_file) khôi phục lại 
-> git reset --mixed HEAD~ thay đổi head và index
-> git reset --hard HEAD~ thay đổi cả 3 (việc này sẽ xóa bản mới nhất đi)
* trick : 2 dấu '~' sẽ quay về 2 bước, mặc định là 1 bước

5. Git Reset file :
	git reset file.txt <=> git reset --mixed HEAD file.txt

6. Khác nhau giữa CHECKOUT và RESET:
+ checkout thì HEAD trỏ đến commit cuối của nhánh được check đến
+ reset thì HEAD trỏ về commit cha của commit đang được trỏ, không care nhánh
VD : commit A <-master, commit B<-develop<-HEAD có commit A là cha
-> Sau khi reset : commit A <-master, develop<-HEAD, commit B không có gì
-> Sau khi checkout : commit A <-master<-HEAD, commit B<-develop

--------------------------STASHING VÀ CLEANING---------------------
1. Trường hợp xảy ra : Đang làm việc và có 1 hotfix cần fix ngay và chuyển
sang nhánh khác, bỏ dở việc đang làm. Nhưng chúng ta lại không muốn
công việc đang làm dở để chuyển sang fix lỗi. 
	-> git stash (stash : giở lại) hoặc git stash save
	-> xem list stash trên tất cả các nhánh : git stash list
-> bạn gom công việc đang làm dở lại, gom modified và staged file vào
trong 1 stack của unfinished change và reapply lại bất cứ khi nào
-> reapply : git stash apply stash@{số_hiệu_khi_xem_list_stash}, nếu
không đưa số hiệu vào thì sẽ là lần sau nhất
-> add -> commit như bt
-> xóa stash : git stash drop stash@{số}
-> nếu muốn apply và xóa ngay lập tức thì git stash pop

Tạo 1 branch từ stash : git stash $branch_name

2. Clean Working Directory: 
Khi bạn không muốn stash 1 vài file làm việc trong working directory
-> git clean
-> cách an toàn hơn : git stash --all để remove tất cả nhưng save vào stash
-> remove tất cả untracked file : git clean -f -d